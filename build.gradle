plugins {
    id "idea"
    id "groovy"
    id "com.energizedwork.webdriver-binaries" version "1.4"
    id "com.energizedwork.idea-base" version "1.4"
    id "com.avast.gradle.docker-compose" version "0.9.4"
}

ext {
    // The drivers we want to use
    // drivers = ["firefoxHeadless", "firefox", "safari", "chromeGrid", "firefoxGrid", "firefoxSouceLabs"]
    drivers = ["firefox"]

    ext {
        gebVersion = '3.0.1'
        groovyVersion = '2.5'

        seleniumVersion = '3.14.0'

        chromeDriverVersion = '73.0.3683.68'
        geckoDriverVersion = '0.24.0'

        phantomJsVersion = '2.1.1'
    }
}

repositories {
    mavenCentral()
    jcenter()
}

dependencies {
    // If using Spock, need to depend on geb-spock
    compile "org.gebish:geb-spock:$gebVersion"
    compile("org.spockframework:spock-core:1.3-groovy-2.5") {
        exclude group: "org.codehaus.groovy"
    }

    // Drivers
    compile "org.seleniumhq.selenium:selenium-chrome-driver:$seleniumVersion"
    compile "org.seleniumhq.selenium:selenium-firefox-driver:$seleniumVersion"
    compile "org.seleniumhq.selenium:selenium-safari-driver:$seleniumVersion"
    // slf4j is required by spock-reports
    testCompile 'org.slf4j:slf4j-log4j12:1.7.26'
    testCompile 'com.athaydes:spock-reports:1.3.2', { transitive = false }
}

webdriverBinaries {
    chromedriver chromeDriverVersion
    geckodriver geckoDriverVersion
}

drivers.each { driver ->

    task "${driver}Test"(type: Test) {

        group JavaBasePlugin.VERIFICATION_GROUP

        outputs.upToDateWhen { false }  // Always run tests

        systemProperty "geb.build.reportsDir", reporting.file("geb/$name")
        systemProperty "geb.env", driver

        if (driver.endsWith("Grid")) {

            systemProperty "SELENIUM_GRID_HOST", System.getenv("SELENIUM_GRID_HOST") ?: "http://localhost:4444/wd/hub"
        } else if (driver.endsWith("SouceLabs")) {

            def username = "mtema"
            def accessKey = "5991966c-a0d9-4a2d-8411-50e9d9c015f7"
            def defaultHost = "https://${username}:${accessKey}@ondemand.eu-central-1.saucelabs.com:443/wd/hub"

            systemProperty "SOUCE_LABS_HOST", System.getenv("SOUCE_LABS_HOST") ?: defaultHost
        }
    }
}

test {

    systemProperty 'com.athaydes.spockframework.report.showCodeBlocks', true

    dependsOn drivers.collect {

        def task = tasks["${it}Test"]

        // up/down docker on selenium grid
        if (it.endsWith("Grid")) {

            dockerCompose.isRequiredBy(task)
        }

        task
    }

    enabled = false
}

tasks.withType(Test) {

    maxHeapSize = "1g"
    jvmArgs '-XX:MaxMetaspaceSize=128m'

    testLogging {
        exceptionFormat = 'full'
    }
}

tasks.withType(GroovyCompile) {

    groovyOptions.forkOptions.memoryMaximumSize = '256m'
}
